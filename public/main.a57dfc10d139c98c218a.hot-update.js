"use strict";
self["webpackHotUpdatefirstproj"]("main",{

/***/ "./app/components/Preloader.js":
/*!*************************************!*\
  !*** ./app/components/Preloader.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Preloader)
/* harmony export */ });
/* harmony import */ var _classes_Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../classes/Component.js */ "./app/classes/Component.js");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var _utils_text_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/text.js */ "./app/utils/text.js");
/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ "./node_modules/ogl/src/core/Texture.js");




class Preloader extends _classes_Component_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor({
    canvas
  }) {
    super({
      element: ".preloader",
      elements: {
        title: ".preloader__text",
        number: ".preloader__number",
        numberText: ".preloader__number__text"
      }
    });
    this.canvas = canvas;
    window.TEXTURES = {};
    (0,_utils_text_js__WEBPACK_IMPORTED_MODULE_1__.split)({
      element: this.elements.title,
      expression: "<br>"
    });
    (0,_utils_text_js__WEBPACK_IMPORTED_MODULE_1__.split)({
      element: this.elements.title,
      expression: "<br>"
    });
    this.elements.titleSpans = this.elements.title.querySelectorAll("span span");
    this.length = 0;
    this.createLoader();
  }
  createLoader() {
    window.ASSETS.forEach(image => {
      const media = new window.Image();
      media.crossOrigin = "anonymous";
      media.src = image;
      const texture = new ogl__WEBPACK_IMPORTED_MODULE_2__.Texture(this.canvas.gl, {
        generateMipmaps: false
      });
      media.onload = _ => {
        texture.image = media;
        this.onAssetLoaded();
      };
      window.TEXTURES[image] = texture;
    });
  }
  onAssetLoaded() {
    this.length += 1;
    const percentage = this.length / window.ASSETS.length;
    this.elements.numberText.innerHTML = `${Math.round(percentage * 100)}%`;
    if (this.length >= window.ASSETS.length) {
      this.onLoaded();
    }
  }
  onLoaded() {
    return new Promise(resolve => {
      this.emit("completed");
      this.animateOut = gsap__WEBPACK_IMPORTED_MODULE_3__["default"].timeline({
        delay: 1,
        onComplete: resolve
      });
      this.animateOut.to(this.elements.titleSpans, {
        y: "100%",
        duration: 1.5,
        ease: "expo.out",
        stagger: 0.1
      });
      this.animateOut.to(this.elements.numberText, {
        y: "100%",
        duration: 1.5,
        ease: "expo.out"
      }, "-=1.4");
      this.animateOut.to(this.element, {
        autoAlpha: 0,
        delay: 1,
        duration: 1
      }, "-=1");
      this.animateOut.call(_ => {
        this.destroy?.();
      });
    });
  }
  destroy() {
    this.element.parentNode?.removeChild(this.element);
  }
}

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("5c0c6354ecfd67bb5a0b")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,