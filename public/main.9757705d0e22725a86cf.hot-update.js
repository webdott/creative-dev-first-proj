"use strict";
self["webpackHotUpdatefirstproj"]("main",{

/***/ "./app/components/Canvas/About/Media.js":
/*!**********************************************!*\
  !*** ./app/components/Canvas/About/Media.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Media)
/* harmony export */ });
/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ "./node_modules/ogl/src/core/Texture.js");
/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ "./node_modules/ogl/src/core/Mesh.js");
/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ "./node_modules/ogl/src/core/Program.js");
/* harmony import */ var _shaders_plane_vertex_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shaders/plane-vertex.glsl */ "./app/shaders/plane-vertex.glsl");
/* harmony import */ var _shaders_plane_fragment_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../shaders/plane-fragment.glsl */ "./app/shaders/plane-fragment.glsl");
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");




class Media {
  constructor({
    element,
    geometry,
    gl,
    scene,
    sizes,
    index
  }) {
    this.gl = gl;
    this.scene = scene;
    this.sizes = sizes;
    this.geometry = geometry;
    this.element = element;
    this.index = index;
    this.createTexture();
    this.createProgram();
    this.createMesh();
  }
  createTexture() {
    this.texture = new ogl__WEBPACK_IMPORTED_MODULE_2__.Texture(this.gl);
    this.elementImg = this.element.querySelector('img');
    this.image = new Image();
    this.image.crossOrigin = 'anonymous';
    this.image.src = this.elementImg.getAttribute('data-src');
    this.image.onload = _ => this.texture.image = this.image;
  }
  createMesh() {
    this.mesh = new ogl__WEBPACK_IMPORTED_MODULE_3__.Mesh(this.gl, {
      geometry: this.geometry,
      program: this.program
    });
    this.mesh.setParent(this.scene);
  }
  createProgram() {
    this.program = new ogl__WEBPACK_IMPORTED_MODULE_4__.Program(this.gl, {
      vertex: _shaders_plane_vertex_glsl__WEBPACK_IMPORTED_MODULE_0__["default"],
      fragment: _shaders_plane_fragment_glsl__WEBPACK_IMPORTED_MODULE_1__["default"],
      uniforms: {
        uAlpha: {
          value: 0
        },
        tMap: {
          value: this.texture
        }
      }
    });
  }
  createBounds({
    sizes
  }) {
    this.sizes = sizes;
    this.bounds = this.element.getBoundingClientRect();
    this.updateScale();
    this.updateX();
    this.updateY();
  }

  /**
   * Animations
   */
  show() {
    gsap__WEBPACK_IMPORTED_MODULE_5__["default"].fromTo(this.program.uniforms.uAlpha, {
      value: 0
    }, {
      value: 1
    });
  }
  hide() {
    gsap__WEBPACK_IMPORTED_MODULE_5__["default"].to(this.program.uniforms.uAlpha, {
      value: 0
    });
  }
  updateRotation() {
    this.mesh.rotation.z = gsap__WEBPACK_IMPORTED_MODULE_5__["default"].utils.mapRange(-this.sizes.width / 2, this.sizes.width / 2, Math.PI * 0.1, -Math.PI * 0.1, this.mesh.position.x);
  }

  /**
   * Events
   */
  onResize(event) {
    this.extra = 0;
    this.createBounds(event);
  }

  /**
   * Loops
   */
  updateScale() {
    const {
      height,
      width
    } = this.sizes;
    this.width = this.bounds.width / window.innerWidth;
    this.height = this.bounds.height / window.innerHeight;
    this.mesh.scale.x = width * this.width;
    this.mesh.scale.y = height * this.height;
  }
  updateX(x = 0) {
    const {
      width
    } = this.sizes;
    this.x = (this.bounds.left + x) / window.innerWidth;
    this.mesh.position.x = -width / 2 + this.mesh.scale.x / 2 + this.x * width + this.extra;
  }
  updateY(y = 0) {
    const {
      height
    } = this.sizes;
    this.y = (this.bounds.top + y) / window.innerHeight;
    this.mesh.position.y = height / 2 - this.mesh.scale.y / 2 - this.y * height;
    this.mesh.position.y += Math.cos(this.mesh.position.x / this.sizes.width * Math.PI * 0.1) * 40 - 40;
  }
  update(scroll) {
    this.updateRotation();
    this.updateScale();
    this.updateX(scroll);
    this.updateY(0);
  }
}

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("d56d13cc6fc16e7293f5")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,